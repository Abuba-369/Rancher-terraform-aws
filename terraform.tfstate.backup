{
    "version": 3,
    "terraform_version": "0.11.13",
    "serial": 8,
    "lineage": "219fa4d5-b312-d6af-784b-51b2b9190c14",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {
                "rancher-url": {
                    "sensitive": false,
                    "type": "list",
                    "value": [
                        "https://35.154.221.31"
                    ]
                }
            },
            "resources": {
                "aws_instance.rancheragent-all": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_security_group.rancher_sg_allowall",
                        "data.aws_ami.ubuntu",
                        "data.template_cloudinit_config.rancheragent-all-cloudinit.*"
                    ],
                    "primary": {
                        "id": "i-04252d8855d4132b6",
                        "attributes": {
                            "ami": "ami-0f4ab593bd4e5b352",
                            "arn": "arn:aws:ec2:ap-south-1:354338307096:instance/i-04252d8855d4132b6",
                            "associate_public_ip_address": "true",
                            "availability_zone": "ap-south-1a",
                            "cpu_core_count": "1",
                            "cpu_threads_per_core": "1",
                            "credit_specification.#": "1",
                            "credit_specification.0.cpu_credits": "standard",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "get_password_data": "false",
                            "iam_instance_profile": "",
                            "id": "i-04252d8855d4132b6",
                            "instance_state": "running",
                            "instance_type": "t2.micro",
                            "ipv6_addresses.#": "0",
                            "key_name": "instance",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "password_data": "",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-009aed2e4789a66d7",
                            "private_dns": "ip-172-31-19-229.ap-south-1.compute.internal",
                            "private_ip": "172.31.19.229",
                            "public_dns": "ec2-13-232-240-64.ap-south-1.compute.amazonaws.com",
                            "public_ip": "13.232.240.64",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.iops": "100",
                            "root_block_device.0.volume_id": "vol-077b9cf45a0f5aefc",
                            "root_block_device.0.volume_size": "8",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "1",
                            "security_groups.30255219": "rancher1-allowall",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-f46f3a9c",
                            "tags.%": "1",
                            "tags.Name": "rancher1-rancheragent-0-all",
                            "tenancy": "default",
                            "user_data": "7abd1700bbee889a7e66e43ce44a4438beeb1fd2",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.3079360778": "sg-005b688b84f23169d"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.rancherserver": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_security_group.rancher_sg_allowall",
                        "data.aws_ami.ubuntu",
                        "data.template_cloudinit_config.rancherserver-cloudinit"
                    ],
                    "primary": {
                        "id": "i-03af076c007150933",
                        "attributes": {
                            "ami": "ami-0f4ab593bd4e5b352",
                            "arn": "arn:aws:ec2:ap-south-1:354338307096:instance/i-03af076c007150933",
                            "associate_public_ip_address": "true",
                            "availability_zone": "ap-south-1a",
                            "cpu_core_count": "1",
                            "cpu_threads_per_core": "1",
                            "credit_specification.#": "1",
                            "credit_specification.0.cpu_credits": "standard",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "get_password_data": "false",
                            "iam_instance_profile": "",
                            "id": "i-03af076c007150933",
                            "instance_state": "running",
                            "instance_type": "t2.micro",
                            "ipv6_addresses.#": "0",
                            "key_name": "instance",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "password_data": "",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-06f0a76d39e43f1e9",
                            "private_dns": "ip-172-31-27-62.ap-south-1.compute.internal",
                            "private_ip": "172.31.27.62",
                            "public_dns": "ec2-35-154-221-31.ap-south-1.compute.amazonaws.com",
                            "public_ip": "35.154.221.31",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.iops": "100",
                            "root_block_device.0.volume_id": "vol-0e020e7aa4c803bfb",
                            "root_block_device.0.volume_size": "8",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "1",
                            "security_groups.30255219": "rancher1-allowall",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-f46f3a9c",
                            "tags.%": "1",
                            "tags.Name": "rancher1-rancherserver",
                            "tenancy": "default",
                            "user_data": "e3d089f13154b10fbaef6ed1ee128185be37bb44",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.3079360778": "sg-005b688b84f23169d"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_security_group.rancher_sg_allowall": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-005b688b84f23169d",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-south-1:354338307096:security-group/sg-005b688b84f23169d",
                            "description": "Managed by Terraform",
                            "egress.#": "1",
                            "egress.482069346.cidr_blocks.#": "1",
                            "egress.482069346.cidr_blocks.0": "0.0.0.0/0",
                            "egress.482069346.description": "",
                            "egress.482069346.from_port": "0",
                            "egress.482069346.ipv6_cidr_blocks.#": "0",
                            "egress.482069346.prefix_list_ids.#": "0",
                            "egress.482069346.protocol": "-1",
                            "egress.482069346.security_groups.#": "0",
                            "egress.482069346.self": "false",
                            "egress.482069346.to_port": "0",
                            "id": "sg-005b688b84f23169d",
                            "ingress.#": "1",
                            "ingress.482069346.cidr_blocks.#": "1",
                            "ingress.482069346.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.482069346.description": "",
                            "ingress.482069346.from_port": "0",
                            "ingress.482069346.ipv6_cidr_blocks.#": "0",
                            "ingress.482069346.prefix_list_ids.#": "0",
                            "ingress.482069346.protocol": "-1",
                            "ingress.482069346.security_groups.#": "0",
                            "ingress.482069346.self": "false",
                            "ingress.482069346.to_port": "0",
                            "name": "rancher1-allowall",
                            "owner_id": "354338307096",
                            "revoke_rules_on_delete": "false",
                            "tags.%": "0",
                            "vpc_id": "vpc-a0c7ebc8"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.aws_ami.ubuntu": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-0f4ab593bd4e5b352",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "3",
                            "block_device_mappings.1634610537.device_name": "/dev/sdb",
                            "block_device_mappings.1634610537.ebs.%": "0",
                            "block_device_mappings.1634610537.no_device": "",
                            "block_device_mappings.1634610537.virtual_name": "ephemeral0",
                            "block_device_mappings.2547816212.device_name": "/dev/sda1",
                            "block_device_mappings.2547816212.ebs.%": "6",
                            "block_device_mappings.2547816212.ebs.delete_on_termination": "true",
                            "block_device_mappings.2547816212.ebs.encrypted": "false",
                            "block_device_mappings.2547816212.ebs.iops": "0",
                            "block_device_mappings.2547816212.ebs.snapshot_id": "snap-0fa50a5bfb32bccd1",
                            "block_device_mappings.2547816212.ebs.volume_size": "8",
                            "block_device_mappings.2547816212.ebs.volume_type": "gp2",
                            "block_device_mappings.2547816212.no_device": "",
                            "block_device_mappings.2547816212.virtual_name": "",
                            "block_device_mappings.3850042718.device_name": "/dev/sdc",
                            "block_device_mappings.3850042718.ebs.%": "0",
                            "block_device_mappings.3850042718.no_device": "",
                            "block_device_mappings.3850042718.virtual_name": "ephemeral1",
                            "creation_date": "2019-04-06T15:15:21.000Z",
                            "description": "Canonical, Ubuntu, 16.04 LTS, amd64 xenial image build on 2019-04-06",
                            "filter.#": "2",
                            "filter.1585153008.name": "name",
                            "filter.1585153008.values.#": "1",
                            "filter.1585153008.values.0": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-0f4ab593bd4e5b352",
                            "image_id": "ami-0f4ab593bd4e5b352",
                            "image_location": "099720109477/ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190406",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190406",
                            "owner_id": "099720109477",
                            "owners.#": "1",
                            "owners.0": "099720109477",
                            "product_codes.#": "0",
                            "public": "true",
                            "root_device_name": "/dev/sda1",
                            "root_device_type": "ebs",
                            "root_snapshot_id": "snap-0fa50a5bfb32bccd1",
                            "sriov_net_support": "simple",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.%": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.template_cloudinit_config.rancheragent-all-cloudinit": {
                    "type": "template_cloudinit_config",
                    "depends_on": [
                        "data.template_file.userdata_agent"
                    ],
                    "primary": {
                        "id": "3170347505",
                        "attributes": {
                            "base64_encode": "true",
                            "gzip": "true",
                            "id": "3170347505",
                            "part.#": "2",
                            "part.0.content": "hostname: rancher1-rancheragent-0-all\nmanage_etc_hosts: true",
                            "part.0.content_type": "text/cloud-config",
                            "part.0.filename": "",
                            "part.0.merge_type": "",
                            "part.1.content": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\nexport rancher_server_ip='35.154.221.31'\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/17.03.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/17.03.sh | sh\nfi\n\nfor image in $curlimage $jqimage; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\nwhile true; do\n  docker run --rm $curlimage -sLk https://$rancher_server_ip/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        $curlimage \\\n        -s \"https://$rancher_server_ip/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n# Get the Agent Image from the rancher server\nwhile true; do\n  AGENTIMAGE=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/settings/agent-image\" | docker run --rm -i $jqimage -r '.value')\n\n  if [ -n \"$AGENTIMAGE\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\nuntil docker inspect $AGENTIMAGE \u003e /dev/null 2\u003e\u00261; do\n  docker pull $AGENTIMAGE\n  sleep 2\ndone\n\n# Test if cluster is created\nwhile true; do\n  CLUSTERID=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusters?name=quickstart\" | docker run --rm -i $jqimage -r '.data[].id')\n\n  if [ -n \"$CLUSTERID\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Get role flags from hostname\nROLEFLAG=`hostname | awk -F'-' '{ print $NF }'`\nif [[ \"$ROLEFLAG\" == \"all\" ]]; then\n  ROLEFLAG=\"all-roles\"\nfi\n\n# Get token\n# Test if cluster is created\nwhile true; do\n  AGENTCMD=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusterregistrationtoken?clusterId=$CLUSTERID\" | docker run --rm -i $jqimage -r '.data[].nodeCommand' | head -1)\n\n  if [ -n \"$AGENTCMD\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Combine command and flags\nCOMPLETECMD=\"$AGENTCMD --address awspublic --internal-address awslocal --$ROLEFLAG\"\n\n# Run command\n$COMPLETECMD",
                            "part.1.content_type": "text/x-shellscript",
                            "part.1.filename": "",
                            "part.1.merge_type": "",
                            "rendered": "H4sIAAAAAAAA/8xW/2/TOBT/PdL+h0eoCEjnhm6HkIoCKqWM6voFjXLSiUObm7w2po6d2U63HeN/P9n50mwdHNzdD1TaFNvP/jx/Pu+Tl6EUBoUhi6sc+5AV3LCcKhNm7BKTZ7CUhUiouor86Xg6ejl/P3s1OPnD9+yI/I5KMyn60Os+PvAOPELaQQdec7aiQq9QkZGIZcLEug9Pl8y0Ahy4wUsTxlwWCYmlWLH1gTdlGe7BpFIbQTPsg6IiTlH1SPVA1/a0x4Ry7mVU0DWeoolP7QbdB6MK/H+SvCQ6Rc51rFhuvpLl/XvhkolwSXUK5NLDy1wqA3GhOMvoGiOa50rmilGDoZ2tIz6dl+vaYCI5FeGn83qpuuWpRrVFdcryKDh60u09+bV7eNjrHvUCz2Mr+ABnscwyKhIgWwd4Bh+fgUlReODGQPQEUmNy3Q9DhRypRt2tTu/GMguZ0IZyThIZb1CFvafdx0ddncI16NRDvodysUbTRrFjIOdz8h9gVszzVlKBowOYgE5DHnQqlp5BIj2AQhjGoTwFmNA5xgY6ZehzCBPchqLgHA6fP+hVW6AOz+1CGeumNUfM4dCzAQI998+7SBlHV0DV9mqzKgQQorJ2bkRPNs21O3uahTkTa3jwAJYK6carAZ9USPdhItdM3EZ0qU3mx+PZyejd2/ns3SjqPGwl8acLsD+Xzm7YSqwVo8H/RobbI5IXS87ikMuY8rdKblmCSpfDFzQ2TIqI2zx9IG8giCuLGGcRmuecxdQGhZ+0FAEQklBDyZIJqq4g+OwXGpW1sN/3aZIx4f/i51TrC6mSZuqL3ceExrhQ+GhHwGL+22gWdR5inEro3OAErveEIawpFiAKukZuUDwq+XRl7Hd2p/pwLwLflorfKubyV8sFgFxjM12rZ59XrBHxGI3dDgP7RoKxg18pmbnJinEoGd8vrsHxaLYYTwfHd4rcEvgOcV31NYM34A8Kk0rF/nJ69OElUoUKbly6Dv92TYQajWFircPyNetw/X+mPOhuKS8wcKQ7yokAv7O75E2ua54blncMN/ze7ffdiV8z/Q3L78K9netr/RaojU025oU2FkRDrJAaTPblGk7ev1uMTsavfiq1qsz1C+uz6Lxg8UYbqsx3KWbt+uFjlyW3VWvu+uOilaZQkiOsOF3r0g91M/dO5pPR68ngODqrp+Aa6MUGyOuABBB8hlwxYaAzew1fgjPX6ax7630+RBH41Fl3l1pzql0hFlz7rrNUFrVvgx+U29XNcPpTqq1wzbRR7jx3txfVwjiJ2tp9fwkImeCwbPQBXEOKNAHSu8vLw+m/KoqhzJZMINRfE/bP1Yc3nE/fTkaLkeV6hwGE0CRRqDXQC132KdcojG0pvL3o2hUQsqsRC3hSiBrM67Qwbn8aEnLg/R0AAP//CBpcCB4LAAA="
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_cloudinit_config.rancherserver-cloudinit": {
                    "type": "template_cloudinit_config",
                    "depends_on": [
                        "data.template_file.userdata_server"
                    ],
                    "primary": {
                        "id": "3043515031",
                        "attributes": {
                            "base64_encode": "true",
                            "gzip": "true",
                            "id": "3043515031",
                            "part.#": "2",
                            "part.0.content": "hostname: rancher1-rancherserver\nmanage_etc_hosts: true",
                            "part.0.content_type": "text/cloud-config",
                            "part.0.filename": "",
                            "part.0.merge_type": "",
                            "part.1.content": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/17.03.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/17.03.sh | sh\nfi\n\nfor image in $curlimage $jqimage \"rancher/rancher:latest\"; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\ndocker run -d --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher rancher/rancher:latest\n\nwhile true; do\n  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        --net=host \\\n        $curlimage \\\n        -s \"https://127.0.0.1/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n    echo \"Login Token is $LOGINTOKEN\"\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n\n# Change password\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"currentPassword\":\"admin\",\"newPassword\":\"admin\"}' --insecure\n\n# Create API key\nAPIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"type\":\"token\",\"description\":\"automation\"}' --insecure)\n\n# Extract and store token\nAPITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`\n\n# Configure server-url\nRANCHER_SERVER=\"https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/latest/meta-data/public-ipv4)\"\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" -X PUT --data-binary '{\"name\":\"server-url\",\"value\":\"'$RANCHER_SERVER'\"}' --insecure\n\n# Create cluster\nCLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"cluster\",\"rancherKubernetesEngineConfig\":{\"addonJobTimeout\":30,\"ignoreDockerVersion\":true,\"sshAgentAuth\":false,\"type\":\"rancherKubernetesEngineConfig\",\"authentication\":{\"type\":\"authnConfig\",\"strategy\":\"x509\"},\"network\":{\"type\":\"networkConfig\",\"plugin\":\"canal\"},\"ingress\":{\"type\":\"ingressConfig\",\"provider\":\"nginx\"},\"services\":{\"type\":\"rkeConfigServices\",\"kubeApi\":{\"podSecurityPolicy\":false,\"type\":\"kubeAPIService\"},\"etcd\":{\"snapshot\":false,\"type\":\"etcdService\",\"extraArgs\":{\"heartbeat-interval\":500,\"election-timeout\":5000}}}},\"name\":\"quickstart\"}' --insecure)\n\n# Extract clusterid to use for generating the docker run command\nCLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`\n\n# Generate registrationtoken\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"'$CLUSTERID'\"}' --insecure",
                            "part.1.content_type": "text/x-shellscript",
                            "part.1.filename": "",
                            "part.1.merge_type": "",
                            "rendered": "H4sIAAAAAAAA/7xXe2/bNhD/X0C+w5UJmhYwLee1tircwU2NNmuaGE5abNiGhpYuEmuKVEjKcdbmuw+kJEex2yJbs/mP2Dze83cvZl9Ji9LS06sCI8hLYXnBtA1zPsfkOUxUKROmr/rk3cG74cvj90evBuPfSOBO9ANqw5WMYKvbWwvWAkrbTGvBQrdm0pyjpkMZq4TLNIInE25bDN64xbkNY6HKhMZKnvN0LXjHc1wxkyljJcsxAs1knKHeovUPg3qGOsiZZCl+RBt/dLwmAqtLvB//5tRkKISJNS/sNxxcfxBOuAwnzGRA5wHOC6UtxKUWPGcp9llRaFVoziyGjtpwfLqo7o3FRAkmw08XQcDP4Xc4i1WeM5kAnXk9Z/Dnc7AZygD8Gag5hMzawkRhqFEgM2i6NSrdWOUhl8YyIWii4inqcOtJt7fTNRl8AZMFKFasXKZo21bcGejFMf0BM+c8CM6VBh8lcAkbC0xgow4eSK0urL8jwSwaS55DogKAUlouoFIPXJoCYwsblegLCBOchbIUArZfPNyqRaBhL9xFxevJRiAWsB04BomB/xPUvLqUQBOgVKOxTNt+KQUaQ41VRYEJ0AKe9qKnPfdjd3cn2t3dcbCFWim7cD2cMR0KPmkI8PXYguAy4wJ9ldY+t72gOgdKJdq+q+Y2aNQcThf52Np+0u11e92tsOAyhYcPYaKRTYMmzr06wHU4VCmXyzY9IofHrw+OxsOT0fHRybC/8ajlxh+ewX28Q+3jwrUbYsvJFqcBsurtbIcW5UTwOBQqZmKk1YwnqE11/JnFlivZF85nAvQNbMZ1V1rflawoBI+ZYwo/GSU3gdKEWUYnXDJ9BZufSWlQu4FBIsKSnEvSIQUz5lLpZEG6dnJcGoxLjY9vwDg9fjs86m88wjhTsHELH/iymiZ+U8hUQ9eqKcpKm1dAPPRw6sjATa3Q2yCey/chaZPhQR+IK2nS6sbq0+QXAIXBBblJt/t9zuusB+uwnzGZIjShB3etMdj8WtJCh6pp0hN73Y3qzbvl6Q2QQWkzpflfnh7BS2Qa9S1YVtMZl1qjtKPlFHaIxMsV6q3Eehg0MoswGB3AFK+Cwejg6wX/bzDx+f5vo3f6SES8JdIhCVariCvpQi6tyr225YIO1mE4t5rFFtyEN1ZpBK/EIVBV+VlV5C1E7lriZx5Yv7RLjVDtYepW23hwtP9mOP54Mhx/GI77i/7/B1A7EQf0T8+623u73fo7rGZnmKNlHqOwmiKUF7Pdx+RHq9ugtVymJryJ5Yfz2gBNgP4Ko/enq8mtp9SNTdIhMyZKR9zcuI3l5jdLOxalsaiD/cP3J6fD8f2Vd634PoH4RnnXlkineQ68LSeoJVo0Q5lyiVWxkegzYUmi5C9qcspzVKUl0U6vQ3gqlcZXPtz6eUYit+s6xJhskKK0zjcSnTNhsNOY/b6xjuuvDKWtA3XWa0F3IRdsxmpmMb0iEZnv9Z6Razea7KXS05ZITVkIFaJ0Ky4iMZNMOBkuU43GtGRqyo1MvSydupTLuZNyxcNjbIvpaR3CSXPXIdNygoOCO65CJSeuhri9GinB46tlWDzv6KCWdkbQxokTNZIVJlN2WcLdN+wdgm7yDHTqfcqQaTtBZimXFvWMCRLt9XodggL9MqG2yeRer9e7vr528FWNcVHyeOrfY9+Zb3Xt8ASsgtIguDdnihI1cy3tdmh7qtWP3qZbDl41c3Cpfe4wC3niB+HryhaCxpT7WuBKVrP2fhpwRe//15HjlunTegfVVweJn1ILHJcG1PL/X5SuBX8HAAD//7zJTuR+DgAA"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.userdata_agent": {
                    "type": "template_file",
                    "depends_on": [
                        "aws_instance.rancherserver"
                    ],
                    "primary": {
                        "id": "55f281d6cd71c1ea6b7027a10ac46fe8ba0d4a0461885db9e271edc7eeb8fe74",
                        "attributes": {
                            "id": "55f281d6cd71c1ea6b7027a10ac46fe8ba0d4a0461885db9e271edc7eeb8fe74",
                            "rendered": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\nexport rancher_server_ip='35.154.221.31'\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/17.03.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/17.03.sh | sh\nfi\n\nfor image in $curlimage $jqimage; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\nwhile true; do\n  docker run --rm $curlimage -sLk https://$rancher_server_ip/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        $curlimage \\\n        -s \"https://$rancher_server_ip/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n# Get the Agent Image from the rancher server\nwhile true; do\n  AGENTIMAGE=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/settings/agent-image\" | docker run --rm -i $jqimage -r '.value')\n\n  if [ -n \"$AGENTIMAGE\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\nuntil docker inspect $AGENTIMAGE \u003e /dev/null 2\u003e\u00261; do\n  docker pull $AGENTIMAGE\n  sleep 2\ndone\n\n# Test if cluster is created\nwhile true; do\n  CLUSTERID=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusters?name=quickstart\" | docker run --rm -i $jqimage -r '.data[].id')\n\n  if [ -n \"$CLUSTERID\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Get role flags from hostname\nROLEFLAG=`hostname | awk -F'-' '{ print $NF }'`\nif [[ \"$ROLEFLAG\" == \"all\" ]]; then\n  ROLEFLAG=\"all-roles\"\nfi\n\n# Get token\n# Test if cluster is created\nwhile true; do\n  AGENTCMD=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusterregistrationtoken?clusterId=$CLUSTERID\" | docker run --rm -i $jqimage -r '.data[].nodeCommand' | head -1)\n\n  if [ -n \"$AGENTCMD\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Combine command and flags\nCOMPLETECMD=\"$AGENTCMD --address awspublic --internal-address awslocal --$ROLEFLAG\"\n\n# Run command\n$COMPLETECMD",
                            "template": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\nexport rancher_server_ip='${server_address}'\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/${docker_version_agent}.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/${docker_version_agent}.sh | sh\nfi\n\nfor image in $curlimage $jqimage; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\nwhile true; do\n  docker run --rm $curlimage -sLk https://$rancher_server_ip/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        $curlimage \\\n        -s \"https://$rancher_server_ip/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"${admin_password}\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n# Get the Agent Image from the rancher server\nwhile true; do\n  AGENTIMAGE=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/settings/agent-image\" | docker run --rm -i $jqimage -r '.value')\n\n  if [ -n \"$AGENTIMAGE\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\nuntil docker inspect $AGENTIMAGE \u003e /dev/null 2\u003e\u00261; do\n  docker pull $AGENTIMAGE\n  sleep 2\ndone\n\n# Test if cluster is created\nwhile true; do\n  CLUSTERID=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusters?name=${cluster_name}\" | docker run --rm -i $jqimage -r '.data[].id')\n\n  if [ -n \"$CLUSTERID\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Get role flags from hostname\nROLEFLAG=`hostname | awk -F'-' '{ print $NF }'`\nif [[ \"$ROLEFLAG\" == \"all\" ]]; then\n  ROLEFLAG=\"all-roles\"\nfi\n\n# Get token\n# Test if cluster is created\nwhile true; do\n  AGENTCMD=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusterregistrationtoken?clusterId=$CLUSTERID\" | docker run --rm -i $jqimage -r '.data[].nodeCommand' | head -1)\n\n  if [ -n \"$AGENTCMD\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Combine command and flags\nCOMPLETECMD=\"$AGENTCMD --address awspublic --internal-address awslocal --$ROLEFLAG\"\n\n# Run command\n$COMPLETECMD",
                            "vars.%": "5",
                            "vars.admin_password": "admin",
                            "vars.cluster_name": "quickstart",
                            "vars.docker_version_agent": "17.03",
                            "vars.rancher_version": "latest",
                            "vars.server_address": "35.154.221.31"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.userdata_server": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "65dbc1e0f813c0261218e2e62d765636da9a5745f2fcc4e0b0211e2b8160a727",
                        "attributes": {
                            "id": "65dbc1e0f813c0261218e2e62d765636da9a5745f2fcc4e0b0211e2b8160a727",
                            "rendered": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/17.03.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/17.03.sh | sh\nfi\n\nfor image in $curlimage $jqimage \"rancher/rancher:latest\"; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\ndocker run -d --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher rancher/rancher:latest\n\nwhile true; do\n  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        --net=host \\\n        $curlimage \\\n        -s \"https://127.0.0.1/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n    echo \"Login Token is $LOGINTOKEN\"\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n\n# Change password\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"currentPassword\":\"admin\",\"newPassword\":\"admin\"}' --insecure\n\n# Create API key\nAPIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"type\":\"token\",\"description\":\"automation\"}' --insecure)\n\n# Extract and store token\nAPITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`\n\n# Configure server-url\nRANCHER_SERVER=\"https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/latest/meta-data/public-ipv4)\"\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" -X PUT --data-binary '{\"name\":\"server-url\",\"value\":\"'$RANCHER_SERVER'\"}' --insecure\n\n# Create cluster\nCLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"cluster\",\"rancherKubernetesEngineConfig\":{\"addonJobTimeout\":30,\"ignoreDockerVersion\":true,\"sshAgentAuth\":false,\"type\":\"rancherKubernetesEngineConfig\",\"authentication\":{\"type\":\"authnConfig\",\"strategy\":\"x509\"},\"network\":{\"type\":\"networkConfig\",\"plugin\":\"canal\"},\"ingress\":{\"type\":\"ingressConfig\",\"provider\":\"nginx\"},\"services\":{\"type\":\"rkeConfigServices\",\"kubeApi\":{\"podSecurityPolicy\":false,\"type\":\"kubeAPIService\"},\"etcd\":{\"snapshot\":false,\"type\":\"etcdService\",\"extraArgs\":{\"heartbeat-interval\":500,\"election-timeout\":5000}}}},\"name\":\"quickstart\"}' --insecure)\n\n# Extract clusterid to use for generating the docker run command\nCLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`\n\n# Generate registrationtoken\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"'$CLUSTERID'\"}' --insecure",
                            "template": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh\nfi\n\nfor image in $curlimage $jqimage \"rancher/rancher:${rancher_version}\"; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\ndocker run -d --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher rancher/rancher:${rancher_version}\n\nwhile true; do\n  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        --net=host \\\n        $curlimage \\\n        -s \"https://127.0.0.1/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n    echo \"Login Token is $LOGINTOKEN\"\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n\n# Change password\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"currentPassword\":\"admin\",\"newPassword\":\"${admin_password}\"}' --insecure\n\n# Create API key\nAPIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"type\":\"token\",\"description\":\"automation\"}' --insecure)\n\n# Extract and store token\nAPITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`\n\n# Configure server-url\nRANCHER_SERVER=\"https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/latest/meta-data/public-ipv4)\"\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" -X PUT --data-binary '{\"name\":\"server-url\",\"value\":\"'$RANCHER_SERVER'\"}' --insecure\n\n# Create cluster\nCLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"cluster\",\"rancherKubernetesEngineConfig\":{\"addonJobTimeout\":30,\"ignoreDockerVersion\":true,\"sshAgentAuth\":false,\"type\":\"rancherKubernetesEngineConfig\",\"authentication\":{\"type\":\"authnConfig\",\"strategy\":\"x509\"},\"network\":{\"type\":\"networkConfig\",\"plugin\":\"canal\"},\"ingress\":{\"type\":\"ingressConfig\",\"provider\":\"nginx\"},\"services\":{\"type\":\"rkeConfigServices\",\"kubeApi\":{\"podSecurityPolicy\":false,\"type\":\"kubeAPIService\"},\"etcd\":{\"snapshot\":false,\"type\":\"etcdService\",\"extraArgs\":{\"heartbeat-interval\":500,\"election-timeout\":5000}}}},\"name\":\"${cluster_name}\"}' --insecure)\n\n# Extract clusterid to use for generating the docker run command\nCLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`\n\n# Generate registrationtoken\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"'$CLUSTERID'\"}' --insecure",
                            "vars.%": "4",
                            "vars.admin_password": "admin",
                            "vars.cluster_name": "quickstart",
                            "vars.docker_version_server": "17.03",
                            "vars.rancher_version": "latest"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                }
            },
            "depends_on": []
        }
    ]
}
